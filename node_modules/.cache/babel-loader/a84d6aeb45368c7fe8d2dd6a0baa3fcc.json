{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar accessors_1 = require(\"./accessors\");\n\nvar support_1 = require(\"./support\");\n\nvar query_1 = require(\"./query\");\n\nvar filter = require(\"lodash/filter\");\n\nvar values = require(\"lodash/values\");\n\nvar reduce = require(\"lodash/reduce\");\n\nvar assign = require(\"lodash/assign\");\n\nvar each = require(\"lodash/each\");\n\nvar without = require(\"lodash/without\");\n\nvar find = require(\"lodash/find\");\n\nvar AccessorManager =\n/** @class */\nfunction () {\n  function AccessorManager() {\n    this.accessors = [];\n    this.queryAccessor = accessors_1.noopQueryAccessor;\n    this.statefulAccessors = {};\n  }\n\n  AccessorManager.prototype.getAccessors = function () {\n    return this.accessors;\n  };\n\n  AccessorManager.prototype.getActiveAccessors = function () {\n    return filter(this.accessors, {\n      active: true\n    });\n  };\n\n  AccessorManager.prototype.getStatefulAccessors = function () {\n    return values(this.statefulAccessors);\n  };\n\n  AccessorManager.prototype.getAccessorsByType = function (type) {\n    return filter(this.accessors, support_1.Utils.instanceOf(type));\n  };\n\n  AccessorManager.prototype.getAccessorByType = function (type) {\n    return find(this.accessors, support_1.Utils.instanceOf(type));\n  };\n\n  AccessorManager.prototype.add = function (accessor) {\n    if (accessor instanceof accessors_1.StatefulAccessor) {\n      if (accessor instanceof accessors_1.BaseQueryAccessor && accessor.key == \"q\") {\n        if (this.queryAccessor !== accessors_1.noopQueryAccessor) {\n          throw new Error(\"Only a single instance of BaseQueryAccessor is allowed\");\n        } else {\n          this.queryAccessor = accessor;\n        }\n      }\n\n      var existingAccessor = this.statefulAccessors[accessor.key];\n\n      if (existingAccessor) {\n        if (existingAccessor.constructor === accessor.constructor) {\n          existingAccessor.incrementRef();\n          return existingAccessor;\n        } else {\n          throw new Error(\"Multiple imcompatible components with id='\" + accessor.key + \"' existing on the page\");\n        }\n      } else {\n        this.statefulAccessors[accessor.key] = accessor;\n      }\n    }\n\n    accessor.incrementRef();\n    this.accessors.push(accessor);\n    return accessor;\n  };\n\n  AccessorManager.prototype.remove = function (accessor) {\n    if (!accessor) {\n      return;\n    }\n\n    accessor.decrementRef();\n\n    if (accessor.refCount === 0) {\n      if (accessor instanceof accessors_1.StatefulAccessor) {\n        if (this.queryAccessor == accessor) {\n          this.queryAccessor = accessors_1.noopQueryAccessor;\n        }\n\n        delete this.statefulAccessors[accessor.key];\n      }\n\n      this.accessors = without(this.accessors, accessor);\n    }\n  };\n\n  AccessorManager.prototype.getState = function () {\n    return reduce(this.getStatefulAccessors(), function (state, accessor) {\n      return assign(state, accessor.getQueryObject());\n    }, {});\n  };\n\n  AccessorManager.prototype.setState = function (state) {\n    each(this.getStatefulAccessors(), function (accessor) {\n      return accessor.fromQueryObject(state);\n    });\n  };\n\n  AccessorManager.prototype.notifyStateChange = function (oldState) {\n    each(this.getStatefulAccessors(), function (accessor) {\n      return accessor.onStateChange(oldState);\n    });\n  };\n\n  AccessorManager.prototype.getQueryAccessor = function () {\n    return this.queryAccessor;\n  };\n\n  AccessorManager.prototype.buildSharedQuery = function (query) {\n    return reduce(this.getActiveAccessors(), function (query, accessor) {\n      return accessor.buildSharedQuery(query);\n    }, query);\n  };\n\n  AccessorManager.prototype.buildOwnQuery = function (query) {\n    return reduce(this.getActiveAccessors(), function (query, accessor) {\n      return accessor.buildOwnQuery(query);\n    }, query);\n  };\n\n  AccessorManager.prototype.buildQuery = function () {\n    each(this.getActiveAccessors(), function (accessor) {\n      return accessor.beforeBuildQuery();\n    });\n    return this.buildOwnQuery(this.buildSharedQuery(new query_1.ImmutableQuery()));\n  };\n\n  AccessorManager.prototype.setResults = function (results) {\n    each(this.accessors, function (a) {\n      return a.setResults(results);\n    });\n  };\n\n  AccessorManager.prototype.resetState = function () {\n    each(this.getStatefulAccessors(), function (a) {\n      return a.resetState();\n    });\n  };\n\n  return AccessorManager;\n}();\n\nexports.AccessorManager = AccessorManager;","map":null,"metadata":{},"sourceType":"script"}