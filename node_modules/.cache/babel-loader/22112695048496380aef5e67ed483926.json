{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar state_1 = require(\"../state\");\n\nvar FilterBasedAccessor_1 = require(\"./FilterBasedAccessor\");\n\nvar query_1 = require(\"../query\");\n\nvar map = require(\"lodash/map\");\n\nvar get = require(\"lodash/get\");\n\nvar includes = require(\"lodash/includes\");\n\nvar startsWith = require(\"lodash/startsWith\");\n\nvar each = require(\"lodash/each\");\n\nvar take = require(\"lodash/take\");\n\nvar NestedFacetAccessor =\n/** @class */\nfunction (_super) {\n  __extends(NestedFacetAccessor, _super);\n\n  function NestedFacetAccessor(key, options) {\n    var _this = _super.call(this, key, options.id) || this;\n\n    _this.state = new state_1.LevelState();\n    _this.options = options;\n    return _this;\n  }\n\n  NestedFacetAccessor.prototype.onResetFilters = function () {\n    this.resetState();\n  };\n\n  NestedFacetAccessor.prototype.getBuckets = function (level) {\n    var buckets = this.getAggregations([this.key, \"children\", \"lvl\" + level, \"children\", \"buckets\"], []);\n    return map(buckets, function (item) {\n      item.key = String(item.key);\n      return item;\n    });\n  };\n\n  NestedFacetAccessor.prototype.buildSharedQuery = function (query) {\n    var _this = this;\n\n    var levelFilters = this.state.getValue();\n    var lastIndex = levelFilters.length - 1;\n    var filterTerms = map(levelFilters, function (filter, i) {\n      var value = filter[0];\n      var isLeaf = i === lastIndex;\n      var subField = isLeaf ? \".value\" : \".ancestors\";\n      return query_1.TermQuery(_this.options.field + subField, value);\n    });\n\n    if (filterTerms.length > 0) {\n      var leafFilter = get(levelFilters, [levelFilters.length - 1, 0], \"\");\n      var parentOfleaf = get(levelFilters, [levelFilters.length - 2, 0], this.options.title || this.key);\n      var selectedFilter = {\n        id: this.key,\n        name: this.translate(parentOfleaf),\n        value: leafFilter,\n        remove: function remove() {\n          _this.state = _this.state.clear(levelFilters.length - 1);\n        }\n      };\n      query = query.addFilter(this.uuid, query_1.NestedQuery(this.options.field, query_1.BoolMust(filterTerms))).addSelectedFilter(selectedFilter);\n    }\n\n    return query;\n  };\n\n  NestedFacetAccessor.prototype.getTermAggs = function () {\n    var _a, _b;\n\n    var subAggs = undefined;\n    var orderMetric = undefined;\n\n    if (this.options.orderKey) {\n      var orderDirection = this.options.orderDirection || \"asc\";\n      var orderKey = this.options.orderKey;\n\n      if (includes([\"_count\", \"_term\"], orderKey)) {\n        orderMetric = (_a = {}, _a[orderKey] = orderDirection, _a);\n      } else {\n        if (startsWith(orderKey, this.options.field + \".\")) {\n          var subAggName = this.options.field + \"_order\";\n          orderMetric = (_b = {}, _b[subAggName] = orderDirection, _b);\n          subAggs = query_1.MinMetric(subAggName, orderKey);\n        }\n      }\n    }\n\n    var valueField = this.options.field + \".value\";\n    var nBuckets = this.options.size || query_1.DefaultNumberBuckets;\n    return query_1.TermsBucket(\"children\", valueField, {\n      size: nBuckets,\n      order: orderMetric\n    }, subAggs);\n  };\n\n  NestedFacetAccessor.prototype.buildOwnQuery = function (query) {\n    var levelField = this.options.field + \".level\";\n    var ancestorsField = this.options.field + \".ancestors\";\n    var startLevel = this.options.startLevel || 1;\n    var termAggs = this.getTermAggs();\n    var lvlAggs = [];\n\n    var addLevel = function addLevel(level, ancestors) {\n      if (ancestors === void 0) {\n        ancestors = [];\n      }\n\n      lvlAggs.push(query_1.FilterBucket(\"lvl\" + level, query_1.BoolMust([query_1.TermQuery(levelField, level + startLevel)].concat(ancestors)), termAggs));\n    };\n\n    addLevel(0);\n    var levels = this.state.getValue();\n    each(levels, function (_level, i) {\n      var ancestors = map(take(levels, i + 1), function (level) {\n        return query_1.TermQuery(ancestorsField, level[0]);\n      });\n      addLevel(i + 1, ancestors);\n    });\n    return query.setAggs(query_1.FilterBucket(this.key, query.getFiltersWithoutKeys(this.uuid), query_1.NestedBucket.apply(void 0, [\"children\", this.options.field].concat(lvlAggs))));\n  };\n\n  return NestedFacetAccessor;\n}(FilterBasedAccessor_1.FilterBasedAccessor);\n\nexports.NestedFacetAccessor = NestedFacetAccessor;","map":null,"metadata":{},"sourceType":"script"}