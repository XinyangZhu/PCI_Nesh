{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar PropTypes = require(\"prop-types\");\n\nvar core_1 = require(\"../../../../core\");\n\nvar ui_1 = require(\"../../../ui\");\n\nvar defaults = require(\"lodash/defaults\");\n\nvar get = require(\"lodash/get\");\n\nvar isNaN = require(\"lodash/isNaN\");\n\nvar PaginationUtils_1 = require(\"./PaginationUtils\");\n\nvar Pagination =\n/** @class */\nfunction (_super) {\n  __extends(Pagination, _super);\n\n  function Pagination(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.translations = Pagination.translations;\n    _this.setPage = _this.setPage.bind(_this);\n    return _this;\n  }\n\n  Pagination.prototype.defineAccessor = function () {\n    return new core_1.PaginationAccessor(\"p\");\n  };\n\n  Pagination.prototype.getCurrentPage = function () {\n    return Number(this.accessor.state.getValue()) || 1;\n  };\n\n  Pagination.prototype.getTotalPages = function () {\n    return Math.ceil(get(this.getResults(), \"hits.total\", 1) / get(this.getQuery(), \"query.size\", 10));\n  };\n\n  Pagination.prototype.isDisabled = function (pageNumber) {\n    return isNaN(pageNumber) || pageNumber < 1 || pageNumber > this.getTotalPages();\n  };\n\n  Pagination.prototype.normalizePage = function (page) {\n    if (page === 'previous') return this.getCurrentPage() - 1;else if (page === 'next') return this.getCurrentPage() + 1;else return +page;\n  };\n\n  Pagination.prototype.setPage = function (page) {\n    var pageNumber = this.normalizePage(page);\n\n    if (this.isDisabled(pageNumber)) {\n      return;\n    }\n\n    ;\n\n    if (pageNumber == this.getCurrentPage()) {\n      return; // Same page, no need to rerun query\n    }\n\n    this.accessor.state = this.accessor.state.setValue(pageNumber);\n    this.searchkit.performSearch();\n  };\n\n  Pagination.prototype.getPages = function () {\n    var _a = this.props,\n        showNumbers = _a.showNumbers,\n        pageScope = _a.pageScope,\n        showText = _a.showText;\n    var currentPage = this.getCurrentPage();\n    var totalPages = this.getTotalPages();\n    var builder = PaginationUtils_1.Paginator.build({\n      showNumbers: showNumbers,\n      showFirst: true,\n      showPrevious: showText,\n      showNext: showText,\n      showEllipsis: showText\n    });\n    return builder(currentPage, totalPages, this.translate, pageScope);\n  };\n\n  Pagination.prototype.render = function () {\n    var _this = this;\n\n    if (!this.accessor) return null;\n    if (!this.hasHits()) return null;\n    var className = core_1.block(this.props.mod).state({\n      numbered: this.props.showNumbers\n    });\n    var view = core_1.renderComponent(this.props.listComponent, {\n      items: this.getPages(),\n      selectedItems: [this.getCurrentPage()],\n      toggleItem: this.setPage,\n      setItems: function setItems(items) {\n        if (items && items.length > 0) _this.setPage(items[0]);\n      },\n      disabled: this.getTotalPages() <= 1\n    });\n    return React.createElement(\"div\", {\n      className: className\n    }, view);\n  };\n\n  Pagination.translations = {\n    \"pagination.previous\": \"Previous\",\n    \"pagination.next\": \"Next\"\n  };\n  Pagination.propTypes = defaults({\n    translations: core_1.SearchkitComponent.translationsPropType(Pagination.translations),\n    listComponent: core_1.RenderComponentPropType,\n    pageScope: PropTypes.number,\n    showNumbers: PropTypes.bool,\n    showText: PropTypes.bool,\n    showLast: PropTypes.bool\n  }, core_1.SearchkitComponent.propTypes);\n  Pagination.defaultProps = {\n    listComponent: ui_1.Toggle,\n    pageScope: 3,\n    showNumbers: false,\n    showText: true,\n    showLast: false,\n    mod: \"sk-pagination-navigation\"\n  };\n  return Pagination;\n}(core_1.SearchkitComponent);\n\nexports.Pagination = Pagination;\n\nvar PaginationSelect =\n/** @class */\nfunction (_super) {\n  __extends(PaginationSelect, _super);\n\n  function PaginationSelect() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  PaginationSelect.defaultProps = defaults({\n    listComponent: ui_1.Select,\n    mod: 'sk-pagination-select',\n    showNumbers: true,\n    showText: false\n  }, Pagination.defaultProps);\n  return PaginationSelect;\n}(Pagination);\n\nexports.PaginationSelect = PaginationSelect;","map":null,"metadata":{},"sourceType":"script"}