{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar PropTypes = require(\"prop-types\");\n\nvar core_1 = require(\"../../../core\");\n\nvar Panel =\n/** @class */\nfunction (_super) {\n  __extends(Panel, _super);\n\n  function Panel(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      collapsed: props.defaultCollapsed\n    };\n    return _this;\n  }\n\n  Panel.prototype.componentWillReceiveProps = function (nextProps) {\n    if (nextProps.defaultCollapsed != this.props.defaultCollapsed) {\n      this.setState({\n        collapsed: nextProps.defaultCollapsed\n      });\n    }\n  };\n\n  Panel.prototype.toggleCollapsed = function () {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n  };\n\n  Panel.prototype.render = function () {\n    var _a = this.props,\n        title = _a.title,\n        mod = _a.mod,\n        className = _a.className,\n        disabled = _a.disabled,\n        children = _a.children,\n        collapsable = _a.collapsable;\n    var collapsed = collapsable && this.state.collapsed;\n    var containerBlock = core_1.block(mod).state({\n      disabled: disabled\n    });\n    var titleDiv;\n\n    if (collapsable) {\n      titleDiv = React.createElement(\"div\", {\n        className: containerBlock.el(\"header\").state({\n          collapsable: collapsable,\n          collapsed: collapsed\n        }),\n        onClick: this.toggleCollapsed.bind(this)\n      }, title);\n    } else {\n      titleDiv = React.createElement(\"div\", {\n        className: containerBlock.el(\"header\")\n      }, title);\n    }\n\n    return React.createElement(\"div\", {\n      className: containerBlock.mix(className)\n    }, titleDiv, React.createElement(\"div\", {\n      className: containerBlock.el(\"content\").state({\n        collapsed: collapsed\n      })\n    }, children));\n  };\n\n  Panel.propTypes = {\n    title: PropTypes.string,\n    disabled: PropTypes.bool,\n    mod: PropTypes.string,\n    className: PropTypes.string,\n    collapsable: PropTypes.bool,\n    defaultCollapsed: PropTypes.bool\n  };\n  Panel.defaultProps = {\n    disabled: false,\n    collapsable: false,\n    defaultCollapsed: true,\n    mod: \"sk-panel\"\n  };\n  return Panel;\n}(React.PureComponent);\n\nexports.Panel = Panel;","map":null,"metadata":{},"sourceType":"script"}