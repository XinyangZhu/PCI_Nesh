{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar react_1 = require(\"../../../core/react\");\n\nvar ItemComponents_1 = require(\"./ItemComponents\");\n\nvar map = require(\"lodash/map\");\n\nvar includes = require(\"lodash/includes\");\n\nvar sortBy = require(\"lodash/sortBy\");\n\nvar minBy = require(\"lodash/minBy\");\n\nvar maxBy = require(\"lodash/maxBy\");\n\nvar identity = require(\"lodash/identity\");\n\nfunction computeMinMax(items, field) {\n  if (!items || items.length == 0) return {\n    min: 0,\n    max: 0\n  };\n  return {\n    min: minBy(items, field)[field],\n    max: maxBy(items, field)[field]\n  };\n}\n\nvar TagCloud =\n/** @class */\nfunction (_super) {\n  __extends(TagCloud, _super);\n\n  function TagCloud() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TagCloud.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        mod = _a.mod,\n        className = _a.className,\n        disabled = _a.disabled,\n        items = _a.items,\n        translate = _a.translate;\n    var bemBlocks = {\n      container: react_1.block(mod).el,\n      option: react_1.block(mod + \"-option\").el\n    };\n    var sortedItems = sortBy(items, function (it) {\n      return translate(it.title || it.label || it.key).toLowerCase();\n    });\n\n    var _b = computeMinMax(items, \"doc_count\"),\n        min = _b.min,\n        max = _b.max;\n\n    return React.createElement(\"div\", {\n      className: bemBlocks.container().mix(className).state({\n        disabled: disabled\n      })\n    }, map(sortedItems, function (item) {\n      return _this.renderItem(item, bemBlocks, min, max);\n    }));\n  };\n\n  TagCloud.prototype.renderItem = function (item, bemBlocks, min, max) {\n    var _a = this.props,\n        itemComponent = _a.itemComponent,\n        minFontSize = _a.minFontSize,\n        maxFontSize = _a.maxFontSize,\n        showCount = _a.showCount,\n        countFormatter = _a.countFormatter,\n        _b = _a.selectedItems,\n        selectedItems = _b === void 0 ? [] : _b,\n        toggleItem = _a.toggleItem,\n        disabled = _a.disabled,\n        translate = _a.translate;\n    var sizeRatio = min === max ? 0.5 : (item.doc_count - min) / (max - min);\n    var fontSize = minFontSize + sizeRatio * (maxFontSize - minFontSize); // TODO : make ratio function customizable (square, log, etc.)\n\n    return react_1.renderComponent(itemComponent, {\n      label: translate(item.title || item.label || item.key),\n      onClick: function onClick() {\n        return toggleItem(item.key);\n      },\n      bemBlocks: bemBlocks,\n      key: item.key,\n      itemKey: item.key,\n      disabled: disabled || item.disabled,\n      active: includes(selectedItems, item.key),\n      style: {\n        fontSize: fontSize + 'em'\n      },\n      showCount: showCount,\n      count: countFormatter(item.doc_count)\n    });\n  };\n\n  TagCloud.defaultProps = {\n    mod: \"sk-tag-cloud\",\n    itemComponent: ItemComponents_1.ItemComponent,\n    showCount: false,\n    minFontSize: 1,\n    maxFontSize: 1.5,\n    translate: identity,\n    countFormatter: identity\n  };\n  return TagCloud;\n}(React.PureComponent);\n\nexports.TagCloud = TagCloud;","map":null,"metadata":{},"sourceType":"script"}