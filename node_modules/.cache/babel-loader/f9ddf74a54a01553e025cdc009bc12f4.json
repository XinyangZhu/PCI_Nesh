{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar State_1 = require(\"./State\");\n\nvar isArray = require(\"lodash/isArray\");\n\nvar take = require(\"lodash/take\");\n\nvar size = require(\"lodash/size\");\n\nvar without = require(\"lodash/without\");\n\nvar indexOf = require(\"lodash/indexOf\");\n\nvar update = require(\"immutability-helper\");\n\nvar LevelState =\n/** @class */\nfunction (_super) {\n  __extends(LevelState, _super);\n\n  function LevelState() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  LevelState.prototype.getValue = function () {\n    return this.value || [];\n  };\n\n  LevelState.prototype.add = function (level, val) {\n    var _a, _b;\n\n    var ob = this.getValue();\n\n    if (!isArray(ob[level])) {\n      ob = update(ob, (_a = {}, _a[level] = {\n        $set: []\n      }, _a));\n    }\n\n    ob = update(ob, (_b = {}, _b[level] = {\n      $push: [val]\n    }, _b));\n    return this.create(ob);\n  };\n\n  LevelState.prototype.contains = function (level, val) {\n    return indexOf(this.getValue()[level], val) !== -1;\n  };\n\n  LevelState.prototype.clear = function (level) {\n    if (level === void 0) {\n      level = 0;\n    }\n\n    return this.create(take(this.getValue(), level));\n  };\n\n  LevelState.prototype.remove = function (level, val) {\n    var _a;\n\n    return this.create(update(this.getValue(), (_a = {}, _a[level] = {\n      $set: without(this.getValue()[level], val)\n    }, _a)));\n  };\n\n  LevelState.prototype.toggle = function (level, val) {\n    if (this.contains(level, val)) {\n      return this.remove(level, val);\n    } else {\n      return this.add(level, val);\n    }\n  };\n\n  LevelState.prototype.getLevel = function (level) {\n    return this.getValue()[level] || [];\n  };\n\n  LevelState.prototype.levelHasFilters = function (level) {\n    return this.getLevel(level).length > 0;\n  };\n\n  LevelState.prototype.getLeafLevel = function () {\n    return size(this.value) - 1;\n  };\n\n  LevelState.prototype.isLeafLevel = function (level) {\n    return level === this.getLeafLevel();\n  };\n\n  LevelState.prototype.toggleLevel = function (level, key) {\n    if (this.contains(level, key)) {\n      if (this.isLeafLevel(level)) {\n        return this.clear(level);\n      } else {\n        return this.clear(level + 1);\n      }\n    } else {\n      return this.clear(level).add(level, key);\n    }\n  };\n\n  return LevelState;\n}(State_1.State);\n\nexports.LevelState = LevelState;","map":null,"metadata":{},"sourceType":"script"}