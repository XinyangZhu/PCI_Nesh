{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar react_1 = require(\"../../../core/react\");\n\nvar omit = require(\"lodash/omit\");\n/*\n * Input validates input and only calls onChange for valid values\n */\n\n\nvar NumberInput =\n/** @class */\nfunction (_super) {\n  __extends(NumberInput, _super);\n\n  function NumberInput(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.onChange = _this.onChange.bind(_this);\n    _this.state = {\n      value: props.value\n    };\n    return _this;\n  }\n\n  NumberInput.prototype.componentWillReceiveProps = function (nextProps) {\n    if (nextProps.value !== this.props.value) {\n      this.setState({\n        value: nextProps.value\n      });\n    }\n  };\n\n  NumberInput.prototype.isValid = function (value) {\n    value = '' + value; // ensure string\n    // Weird number check, please do something else\n\n    return '' + parseInt(value, 10) == value;\n  };\n\n  NumberInput.prototype.onChange = function (e) {\n    var _a = this.props,\n        field = _a.field,\n        onChange = _a.onChange;\n    var value = e.target.value;\n    this.setState({\n      value: value\n    });\n\n    if (this.isValid(value) && onChange) {\n      onChange(value, field);\n    }\n  };\n\n  NumberInput.prototype.render = function () {\n    var rest = omit(this.props, ['field', 'onChange']);\n    return React.createElement(\"input\", __assign({\n      type: \"number\"\n    }, rest, {\n      value: this.state.value,\n      onChange: this.onChange\n    }));\n  };\n\n  NumberInput.defaultProps = {\n    value: ''\n  };\n  return NumberInput;\n}(React.Component);\n\nexports.NumberInput = NumberInput;\n\nvar RangeInput =\n/** @class */\nfunction (_super) {\n  __extends(RangeInput, _super);\n\n  function RangeInput(props) {\n    var _this = _super.call(this, props) || this; // this.handleInputChange = this.handleInputChange.bind(this);\n\n\n    _this.handleSubmit = _this.handleSubmit.bind(_this);\n    return _this;\n  }\n\n  RangeInput.prototype.handleInputChange = function (_value, _key) {// const { min, max, minValue, maxValue, onFinished } = this.props\n    // const values = defaults({\n    //   [key]: clamp(value, min, max)\n    // }, {\n    //   min: minValue, max: maxValue\n    // })\n    // onFinished(values)\n  };\n\n  RangeInput.prototype.handleSubmit = function (e) {\n    e.preventDefault();\n    this.props.onFinished({\n      min: this.refs.min.state.value,\n      max: this.refs.max.state.value\n    });\n  };\n\n  RangeInput.prototype.render = function () {\n    var _a = this.props,\n        mod = _a.mod,\n        className = _a.className,\n        minValue = _a.minValue,\n        maxValue = _a.maxValue,\n        translate = _a.translate,\n        minPlaceholder = _a.minPlaceholder,\n        maxPlaceholder = _a.maxPlaceholder;\n    var bemBlocks = {\n      container: react_1.block(mod).el\n    };\n    return React.createElement(\"form\", {\n      className: bemBlocks.container().mix(className),\n      onSubmit: this.handleSubmit\n    }, React.createElement(NumberInput, {\n      ref: \"min\",\n      className: bemBlocks.container(\"input\"),\n      value: minValue,\n      field: \"min\",\n      onChange: this.handleInputChange,\n      placeholder: translate('range.min') || minPlaceholder\n    }), React.createElement(\"div\", {\n      className: bemBlocks.container(\"to-label\")\n    }, translate('range.to') || '-'), React.createElement(NumberInput, {\n      ref: \"max\",\n      className: bemBlocks.container(\"input\"),\n      value: maxValue,\n      field: \"max\",\n      onChange: this.handleInputChange,\n      placeholder: translate('range.max') || maxPlaceholder\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      className: bemBlocks.container(\"submit\")\n    }, translate('range.submit') || 'Go'));\n  };\n\n  RangeInput.defaultProps = {\n    mod: \"sk-range-input\",\n    translate: function translate(_str) {\n      return undefined;\n    },\n    minPlaceholder: 'min',\n    maxPlaceholder: 'max'\n  };\n  return RangeInput;\n}(React.Component);\n\nexports.RangeInput = RangeInput;","map":null,"metadata":{},"sourceType":"script"}