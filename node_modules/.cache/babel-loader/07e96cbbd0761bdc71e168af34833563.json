{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar react_1 = require(\"../../../core/react\");\n\nvar maxBy = require(\"lodash/maxBy\");\n\nvar map = require(\"lodash/map\");\n\nfunction computeMaxValue(items, field) {\n  if (!items || items.length == 0) return 0;\n  return maxBy(items, field)[field];\n}\n\nvar RangeHistogram =\n/** @class */\nfunction (_super) {\n  __extends(RangeHistogram, _super);\n\n  function RangeHistogram() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  RangeHistogram.prototype.render = function () {\n    var _a = this.props,\n        mod = _a.mod,\n        className = _a.className,\n        minValue = _a.minValue,\n        maxValue = _a.maxValue,\n        _b = _a.items,\n        items = _b === void 0 ? [] : _b;\n    var bemBlocks = {\n      container: react_1.block(mod).el\n    };\n    var maxCount = computeMaxValue(items, \"doc_count\");\n    if (maxCount == 0) return null;\n    var bars = map(items, function (_a) {\n      var key = _a.key,\n          doc_count = _a.doc_count;\n      var outOfBounds = key < minValue || key > maxValue;\n      return React.createElement(\"div\", {\n        className: bemBlocks.container('bar').state({\n          'out-of-bounds': outOfBounds\n        }),\n        key: key,\n        style: {\n          height: doc_count / maxCount * 100 + \"%\"\n        }\n      });\n    });\n    return React.createElement(\"div\", {\n      className: bemBlocks.container().mix(className)\n    }, bars);\n  };\n\n  RangeHistogram.defaultProps = {\n    mod: 'sk-range-histogram'\n  };\n  return RangeHistogram;\n}(React.PureComponent);\n\nexports.RangeHistogram = RangeHistogram;","map":null,"metadata":{},"sourceType":"script"}