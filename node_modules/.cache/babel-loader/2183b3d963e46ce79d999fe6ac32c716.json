{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar query_1 = require(\"./query\");\n\nvar accessors_1 = require(\"./accessors\");\n\nvar AccessorManager_1 = require(\"./AccessorManager\");\n\nvar transport_1 = require(\"./transport\");\n\nvar SearchRequest_1 = require(\"./SearchRequest\");\n\nvar support_1 = require(\"./support\");\n\nvar history_1 = require(\"./history\");\n\nvar defaults = require(\"lodash/defaults\");\n\nvar constant = require(\"lodash/constant\");\n\nvar identity = require(\"lodash/identity\");\n\nvar map = require(\"lodash/map\");\n\nvar isEqual = require(\"lodash/isEqual\");\n\nvar get = require(\"lodash/get\");\n\nvar SearchkitManager =\n/** @class */\nfunction () {\n  function SearchkitManager(host, options, initialState) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (initialState === void 0) {\n      initialState = {};\n    }\n\n    var _this = this;\n\n    this.options = defaults(options, {\n      useHistory: true,\n      httpHeaders: {},\n      searchOnLoad: true,\n      defaultSize: 20,\n      createHistory: history_1.createHistoryInstance,\n      getLocation: function getLocation() {\n        return typeof window !== 'undefined' && window.location;\n      }\n    });\n    this.host = host;\n    this.guidGenerator = new support_1.GuidGenerator();\n    this.results = initialState.results;\n    this.state = initialState.state || {};\n    this.transport = this.options.transport || new transport_1.AxiosESTransport(host, {\n      headers: this.options.httpHeaders,\n      basicAuth: this.options.basicAuth,\n      searchUrlPath: this.options.searchUrlPath,\n      timeout: this.options.timeout,\n      withCredentials: this.options.withCredentials\n    });\n    this.accessors = new AccessorManager_1.AccessorManager();\n    this.accessors.add(new accessors_1.PageSizeAccessor(this.options.defaultSize));\n    this.registrationCompleted = new Promise(function (resolve) {\n      _this.completeRegistration = resolve;\n    });\n    this.translateFunction = constant(undefined);\n    this.queryProcessor = identity;\n\n    this.shouldPerformSearch = function () {\n      return true;\n    };\n\n    this.query = new query_1.ImmutableQuery();\n    this.emitter = new support_1.EventEmitter();\n    this.resultsEmitter = new support_1.EventEmitter();\n  }\n\n  SearchkitManager.mock = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var searchkit = new SearchkitManager(\"/\", __assign({\n      useHistory: false,\n      transport: new transport_1.MockESTransport()\n    }, options));\n    searchkit.setupListeners();\n    return searchkit;\n  };\n\n  SearchkitManager.prototype.setupListeners = function () {\n    this.initialLoading = !this.results;\n\n    if (this.options.useHistory) {\n      this.unlistenHistory();\n      this.history = this.options.createHistory();\n      this.listenToHistory();\n    }\n\n    this.runInitialSearch();\n  };\n\n  SearchkitManager.prototype.addAccessor = function (accessor) {\n    accessor.setSearchkitManager(this);\n    return this.accessors.add(accessor);\n  };\n\n  SearchkitManager.prototype.removeAccessor = function (accessor) {\n    this.accessors.remove(accessor);\n  };\n\n  SearchkitManager.prototype.addDefaultQuery = function (fn) {\n    return this.addAccessor(new accessors_1.AnonymousAccessor(fn));\n  };\n\n  SearchkitManager.prototype.setQueryProcessor = function (fn) {\n    this.queryProcessor = fn;\n  };\n\n  SearchkitManager.prototype.translate = function (key) {\n    return this.translateFunction(key);\n  };\n\n  SearchkitManager.prototype.buildQuery = function () {\n    return this.accessors.buildQuery();\n  };\n\n  SearchkitManager.prototype.resetState = function () {\n    this.accessors.resetState();\n  };\n\n  SearchkitManager.prototype.addResultsListener = function (fn) {\n    return this.resultsEmitter.addListener(fn);\n  };\n\n  SearchkitManager.prototype.unlistenHistory = function () {\n    if (this.options.useHistory && this._unlistenHistory) {\n      this._unlistenHistory();\n    }\n  };\n\n  SearchkitManager.prototype.listenToHistory = function () {\n    var _this = this;\n\n    this._unlistenHistory = this.history.listen(function (location, action) {\n      if (action === \"POP\") {\n        _this._searchWhenCompleted(location);\n      }\n    });\n  };\n\n  SearchkitManager.prototype._searchWhenCompleted = function (location) {\n    var _this = this;\n\n    this.registrationCompleted.then(function () {\n      _this.searchFromUrlQuery(location.search);\n    }).catch(function (e) {\n      console.error(e);\n    });\n  };\n\n  SearchkitManager.prototype.runInitialSearch = function () {\n    if (this.options.searchOnLoad) {\n      this._searchWhenCompleted(this.options.getLocation());\n    }\n  };\n\n  SearchkitManager.prototype.searchFromUrlQuery = function (query) {\n    query = history_1.decodeObjString(query.replace(/^\\?/, \"\"));\n    this.accessors.setState(query);\n    return this._search();\n  };\n\n  SearchkitManager.prototype.performSearch = function (replaceState, notifyState) {\n    if (replaceState === void 0) {\n      replaceState = false;\n    }\n\n    if (notifyState === void 0) {\n      notifyState = true;\n    }\n\n    if (notifyState && !isEqual(this.accessors.getState(), this.state)) {\n      this.accessors.notifyStateChange(this.state);\n    }\n\n    var searchPromise = this._search();\n\n    if (this.options.useHistory) {\n      var historyMethod = replaceState ? this.history.replace : this.history.push;\n      var url = this.options.getLocation().pathname + \"?\" + history_1.encodeObjUrl(this.state);\n      historyMethod.call(this.history, url);\n    }\n\n    return searchPromise;\n  };\n\n  SearchkitManager.prototype.buildSearchUrl = function (extraParams) {\n    if (extraParams === void 0) {\n      extraParams = {};\n    }\n\n    var params = defaults(extraParams, this.state || this.accessors.getState());\n    return this.options.getLocation().pathname + '?' + history_1.encodeObjUrl(params);\n  };\n\n  SearchkitManager.prototype.reloadSearch = function () {\n    delete this.query;\n    return this.performSearch();\n  };\n\n  SearchkitManager.prototype.search = function (replaceState) {\n    if (replaceState === void 0) {\n      replaceState = false;\n    }\n\n    return this.performSearch(replaceState);\n  };\n\n  SearchkitManager.prototype.getResultsAndState = function () {\n    return {\n      results: this.results,\n      state: this.state\n    };\n  };\n\n  SearchkitManager.prototype._search = function () {\n    var _this = this;\n\n    this.state = this.accessors.getState();\n    var query = this.buildQuery();\n\n    if (!this.shouldPerformSearch(query)) {\n      return Promise.resolve(this.getResultsAndState());\n    }\n\n    if (this.results && this.query && isEqual(query.getJSON(), this.query.getJSON())) {\n      return Promise.resolve(this.getResultsAndState());\n    }\n\n    this.query = query;\n    this.loading = true;\n    this.emitter.trigger();\n    var queryObject = this.queryProcessor(this.query.getJSON());\n    this.currentSearchRequest && this.currentSearchRequest.deactivate();\n    this.currentSearchRequest = new SearchRequest_1.SearchRequest(this.transport, queryObject, this);\n    return this.currentSearchRequest.run().then(function () {\n      return _this.getResultsAndState();\n    });\n  };\n\n  SearchkitManager.prototype.setResults = function (results) {\n    this.compareResults(this.results, results);\n    this.results = results;\n    this.error = null;\n    this.accessors.setResults(results);\n    this.onResponseChange();\n    this.resultsEmitter.trigger(this.results);\n  };\n\n  SearchkitManager.prototype.compareResults = function (previousResults, results) {\n    var ids = map(get(results, [\"hits\", \"hits\"], []), \"_id\").join(\",\");\n    var previousIds = get(previousResults, [\"hits\", \"ids\"], \"\");\n\n    if (results.hits) {\n      results.hits.ids = ids;\n      results.hits.hasChanged = !(ids && ids === previousIds);\n    }\n  };\n\n  SearchkitManager.prototype.guid = function (prefix) {\n    return this.guidGenerator.guid(prefix);\n  };\n\n  SearchkitManager.prototype.getHits = function () {\n    return get(this.results, [\"hits\", \"hits\"], []);\n  };\n\n  SearchkitManager.prototype.getHitsCount = function () {\n    return get(this.results, [\"hits\", \"total\"], 0);\n  };\n\n  SearchkitManager.prototype.getTime = function () {\n    return get(this.results, \"took\", 0);\n  };\n\n  SearchkitManager.prototype.getSuggestions = function () {\n    return get(this.results, [\"suggest\", \"suggestions\"], {});\n  };\n\n  SearchkitManager.prototype.getQueryAccessor = function () {\n    return this.accessors.queryAccessor;\n  };\n\n  SearchkitManager.prototype.getAccessorsByType = function (type) {\n    return this.accessors.getAccessorsByType(type);\n  };\n\n  SearchkitManager.prototype.getAccessorByType = function (type) {\n    return this.accessors.getAccessorByType(type);\n  };\n\n  SearchkitManager.prototype.hasHits = function () {\n    return this.getHitsCount() > 0;\n  };\n\n  SearchkitManager.prototype.hasHitsChanged = function () {\n    return get(this.results, [\"hits\", \"hasChanged\"], true);\n  };\n\n  SearchkitManager.prototype.setError = function (error) {\n    this.error = error;\n    console.error(this.error);\n    this.results = null;\n    this.accessors.setResults(null);\n    this.onResponseChange();\n  };\n\n  SearchkitManager.prototype.onResponseChange = function () {\n    this.loading = false;\n    this.initialLoading = false;\n    this.emitter.trigger();\n  };\n\n  return SearchkitManager;\n}();\n\nexports.SearchkitManager = SearchkitManager;","map":null,"metadata":{},"sourceType":"script"}