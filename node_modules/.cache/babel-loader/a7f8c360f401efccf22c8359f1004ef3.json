{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar FilterBasedAccessor_1 = require(\"./FilterBasedAccessor\");\n\nvar state_1 = require(\"../state\");\n\nvar query_1 = require(\"../query\");\n\nvar assign = require(\"lodash/assign\");\n\nvar identity = require(\"lodash/identity\");\n\nvar DynamicRangeAccessor =\n/** @class */\nfunction (_super) {\n  __extends(DynamicRangeAccessor, _super);\n\n  function DynamicRangeAccessor(key, options) {\n    var _this = _super.call(this, key, options.id) || this;\n\n    _this.state = new state_1.ObjectState({});\n    _this.translations = DynamicRangeAccessor.translations;\n    _this.options = options;\n    _this.options.fieldOptions = _this.options.fieldOptions || {\n      type: \"embedded\"\n    };\n    _this.options.fieldOptions.field = _this.options.field;\n    _this.fieldContext = query_1.FieldContextFactory(_this.options.fieldOptions);\n    _this.options.rangeFormatter = _this.options.rangeFormatter || identity;\n\n    if (options.translations) {\n      _this.translations = assign({}, _this.translations, options.translations);\n    }\n\n    return _this;\n  }\n\n  DynamicRangeAccessor.prototype.getSelectedValue = function (value) {\n    var divider = this.translate(\"range.divider\");\n    return [this.options.rangeFormatter(value.min), divider, this.options.rangeFormatter(value.max)].join(\"\");\n  };\n\n  DynamicRangeAccessor.prototype.buildSharedQuery = function (query) {\n    var _this = this;\n\n    if (this.state.hasValue()) {\n      var val = this.state.getValue();\n      var rangeFilter = this.fieldContext.wrapFilter(query_1.RangeQuery(this.options.field, {\n        gte: val.min,\n        lte: val.max\n      }));\n      var selectedFilter = {\n        name: this.translate(this.options.title),\n        value: this.getSelectedValue(val),\n        id: this.options.id,\n        remove: function remove() {\n          _this.state = _this.state.clear();\n        }\n      };\n      return query.addFilter(this.key, rangeFilter).addSelectedFilter(selectedFilter);\n    }\n\n    return query;\n  };\n\n  DynamicRangeAccessor.prototype.getStat = function (stat) {\n    return this.getAggregations([this.key, this.fieldContext.getAggregationPath(), this.key, stat], 0);\n  };\n\n  DynamicRangeAccessor.prototype.isDisabled = function () {\n    return this.getStat(\"count\") === 0 || this.getStat(\"min\") === this.getStat(\"max\");\n  };\n\n  DynamicRangeAccessor.prototype.buildOwnQuery = function (query) {\n    var otherFilters = query.getFiltersWithoutKeys(this.key);\n    return query.setAggs(query_1.FilterBucket.apply(void 0, [this.key, otherFilters].concat(this.fieldContext.wrapAggregations(query_1.StatsMetric(this.key, this.options.field)))));\n  };\n\n  DynamicRangeAccessor.translations = {\n    \"range.divider\": \" - \"\n  };\n  return DynamicRangeAccessor;\n}(FilterBasedAccessor_1.FilterBasedAccessor);\n\nexports.DynamicRangeAccessor = DynamicRangeAccessor;","map":null,"metadata":{},"sourceType":"script"}