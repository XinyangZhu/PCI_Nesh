{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar PropTypes = require(\"prop-types\");\n\nvar core_1 = require(\"../../../../core\");\n\nvar SearchBox_1 = require(\"../../search-box/SearchBox\");\n\nvar ui_1 = require(\"../../../ui\");\n\nvar defaults = require(\"lodash/defaults\");\n\nvar throttle = require(\"lodash/throttle\");\n\nvar assign = require(\"lodash/assign\");\n\nvar isUndefined = require(\"lodash/isUndefined\");\n\nvar InputFilter =\n/** @class */\nfunction (_super) {\n  __extends(InputFilter, _super);\n\n  function InputFilter(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.translations = SearchBox_1.SearchBox.translations;\n    _this.state = {\n      focused: false,\n      input: undefined\n    };\n    _this.lastSearchMs = 0;\n    _this.onClear = _this.onClear.bind(_this);\n    _this.throttledSearch = throttle(function () {\n      _this.searchQuery(_this.accessor.getQueryString());\n    }, props.searchThrottleTime);\n    return _this;\n  }\n\n  InputFilter.prototype.componentDidMount = function () {\n    _super.prototype.componentDidMount.call(this);\n  };\n\n  InputFilter.prototype.defineBEMBlocks = function () {\n    return {\n      container: this.props.mod\n    };\n  };\n\n  InputFilter.prototype.defineAccessor = function () {\n    var _this = this;\n\n    var _a = this.props,\n        id = _a.id,\n        title = _a.title,\n        prefixQueryFields = _a.prefixQueryFields,\n        queryFields = _a.queryFields,\n        queryBuilder = _a.queryBuilder,\n        queryOptions = _a.queryOptions,\n        prefixQueryOptions = _a.prefixQueryOptions;\n    return new core_1.QueryAccessor(id, {\n      title: title,\n      addToFilters: true,\n      queryFields: queryFields || [\"_all\"],\n      prefixQueryFields: prefixQueryFields,\n      queryOptions: assign({}, queryOptions),\n      prefixQueryOptions: assign({}, prefixQueryOptions),\n      queryBuilder: queryBuilder,\n      onQueryStateChange: function onQueryStateChange() {\n        if (!_this.unmounted && _this.state.input) {\n          _this.setState({\n            input: undefined\n          });\n        }\n      }\n    });\n  };\n\n  InputFilter.prototype.onSubmit = function (event) {\n    event.preventDefault();\n    this.searchQuery(this.getValue());\n  };\n\n  InputFilter.prototype.searchQuery = function (query) {\n    var shouldResetOtherState = false;\n    this.accessor.setQueryString(query, shouldResetOtherState);\n    var now = +new Date();\n    var newSearch = now - this.lastSearchMs <= 2000;\n    this.lastSearchMs = now;\n    this.searchkit.performSearch(newSearch);\n  };\n\n  InputFilter.prototype.getValue = function () {\n    var input = this.state.input;\n\n    if (isUndefined(input)) {\n      return this.getAccessorValue();\n    } else {\n      return input;\n    }\n  };\n\n  InputFilter.prototype.getAccessorValue = function () {\n    return (this.accessor.state.getValue() || \"\") + \"\";\n  };\n\n  InputFilter.prototype.onChange = function (e) {\n    var query = e.target.value;\n\n    if (this.props.searchOnChange) {\n      this.accessor.setQueryString(query);\n      this.throttledSearch();\n      this.forceUpdate();\n    } else {\n      this.setState({\n        input: query\n      });\n    }\n  };\n\n  InputFilter.prototype.onClear = function () {\n    this.accessor.state = this.accessor.state.clear();\n    this.searchkit.performSearch();\n    this.setState({\n      input: undefined\n    });\n  };\n\n  InputFilter.prototype.setFocusState = function (focused) {\n    if (!focused) {\n      var input = this.state.input;\n\n      if (this.props.blurAction == \"search\" && !isUndefined(input) && input != this.getAccessorValue()) {\n        this.searchQuery(input);\n      }\n\n      this.setState({\n        focused: focused,\n        input: undefined // Flush (should use accessor's state now)\n\n      });\n    } else {\n      this.setState({\n        focused: focused\n      });\n    }\n  };\n\n  InputFilter.prototype.render = function () {\n    if (!this.accessor) return null;\n    var _a = this.props,\n        containerComponent = _a.containerComponent,\n        title = _a.title,\n        id = _a.id;\n    var block = this.bemBlocks.container;\n    var value = this.getValue();\n    return core_1.renderComponent(containerComponent, {\n      title: title,\n      className: id ? \"filter--\" + id : undefined,\n      disabled: this.searchkit.getHitsCount() == 0 && this.getAccessorValue() == \"\"\n    }, React.createElement(\"div\", {\n      className: block().state({\n        focused: this.state.focused\n      })\n    }, React.createElement(\"form\", {\n      onSubmit: this.onSubmit.bind(this)\n    }, React.createElement(\"div\", {\n      className: block(\"icon\")\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      \"data-qa\": \"input-filter\",\n      className: block(\"text\"),\n      placeholder: this.props.placeholder || this.translate(\"searchbox.placeholder\"),\n      value: value,\n      onFocus: this.setFocusState.bind(this, true),\n      onBlur: this.setFocusState.bind(this, false),\n      ref: \"queryField\",\n      autoFocus: false,\n      onInput: this.onChange.bind(this)\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: this.translate(\"searchbox.button\"),\n      className: block(\"action\"),\n      \"data-qa\": \"submit\"\n    }), React.createElement(\"div\", {\n      \"data-qa\": \"remove\",\n      onClick: this.onClear,\n      className: block(\"remove\").state({\n        hidden: value == \"\"\n      })\n    }))));\n  };\n\n  InputFilter.translations = {\n    \"searchbox.placeholder\": \"Search\",\n    \"searchbox.button\": \"search\"\n  };\n  InputFilter.defaultProps = {\n    containerComponent: ui_1.Panel,\n    collapsable: false,\n    mod: \"sk-input-filter\",\n    searchThrottleTime: 200,\n    blurAction: \"search\"\n  };\n  InputFilter.propTypes = defaults({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    searchOnChange: PropTypes.bool,\n    searchThrottleTime: PropTypes.number,\n    queryBuilder: PropTypes.func,\n    queryFields: PropTypes.arrayOf(PropTypes.string),\n    queryOptions: PropTypes.object,\n    prefixQueryFields: PropTypes.arrayOf(PropTypes.string),\n    prefixQueryOptions: PropTypes.object,\n    translations: core_1.SearchkitComponent.translationsPropType(SearchBox_1.SearchBox.translations),\n    mod: PropTypes.string,\n    placeholder: PropTypes.string,\n    blurAction: PropTypes.string\n  }, core_1.SearchkitComponent.propTypes);\n  return InputFilter;\n}(core_1.SearchkitComponent);\n\nexports.InputFilter = InputFilter;","map":null,"metadata":{},"sourceType":"script"}