{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar state_1 = require(\"../state\");\n\nvar FilterBasedAccessor_1 = require(\"./FilterBasedAccessor\");\n\nvar query_1 = require(\"../query\");\n\nvar assign = require(\"lodash/assign\");\n\nvar map = require(\"lodash/map\");\n\nvar omitBy = require(\"lodash/omitBy\");\n\nvar isUndefined = require(\"lodash/isUndefined\");\n\nvar each = require(\"lodash/each\");\n\nvar FacetAccessor =\n/** @class */\nfunction (_super) {\n  __extends(FacetAccessor, _super);\n\n  function FacetAccessor(key, options) {\n    var _this = _super.call(this, key, options.id) || this;\n\n    _this.state = new state_1.ArrayState();\n    _this.translations = FacetAccessor.translations;\n    _this.options = options;\n    _this.defaultSize = options.size;\n    _this.options.facetsPerPage = _this.options.facetsPerPage || 50;\n    _this.size = _this.defaultSize;\n    _this.loadAggregations = isUndefined(_this.options.loadAggregations) ? true : _this.options.loadAggregations;\n\n    if (options.translations) {\n      _this.translations = assign({}, _this.translations, options.translations);\n    }\n\n    _this.options.fieldOptions = _this.options.fieldOptions || {\n      type: \"embedded\"\n    };\n    _this.options.fieldOptions.field = _this.options.field;\n    _this.fieldContext = query_1.FieldContextFactory(_this.options.fieldOptions);\n    return _this;\n  }\n\n  FacetAccessor.prototype.getRawBuckets = function () {\n    return this.getAggregations([this.uuid, this.fieldContext.getAggregationPath(), this.options.field, \"buckets\"], []);\n  };\n\n  FacetAccessor.prototype.getBuckets = function () {\n    var rawBuckets = this.getRawBuckets();\n    var keyIndex = {};\n    each(rawBuckets, function (item) {\n      item.key = item.key_as_string || String(item.key);\n      keyIndex[item.key] = item;\n    });\n    var missingFilters = [];\n    each(this.state.getValue(), function (filterKey) {\n      if (keyIndex[filterKey]) {\n        var filter = keyIndex[filterKey];\n        filter.selected = true;\n      } else {\n        missingFilters.push({\n          key: filterKey,\n          missing: true,\n          selected: true\n        });\n      }\n    });\n    var buckets = missingFilters.length > 0 ? missingFilters.concat(rawBuckets) : rawBuckets;\n    return buckets;\n  };\n\n  FacetAccessor.prototype.getDocCount = function () {\n    return this.getAggregations([this.uuid, this.fieldContext.getAggregationPath(), \"doc_count\"], 0);\n  };\n\n  FacetAccessor.prototype.getCount = function () {\n    return this.getAggregations([this.uuid, this.fieldContext.getAggregationPath(), this.options.field + \"_count\", \"value\"], 0);\n  };\n\n  FacetAccessor.prototype.setViewMoreOption = function (option) {\n    this.size = option.size;\n  };\n\n  FacetAccessor.prototype.getMoreSizeOption = function () {\n    var option = {\n      size: 0,\n      label: \"\"\n    };\n    var total = this.getCount();\n    var facetsPerPage = this.options.facetsPerPage;\n    if (total <= this.defaultSize) return null;\n\n    if (total <= this.size) {\n      option = {\n        size: this.defaultSize,\n        label: this.translate(\"facets.view_less\")\n      };\n    } else if (this.size + facetsPerPage >= total) {\n      option = {\n        size: total,\n        label: this.translate(\"facets.view_all\")\n      };\n    } else if (this.size + facetsPerPage < total) {\n      option = {\n        size: this.size + facetsPerPage,\n        label: this.translate(\"facets.view_more\")\n      };\n    } else if (total) {\n      option = null;\n    }\n\n    return option;\n  };\n\n  FacetAccessor.prototype.isOrOperator = function () {\n    return this.options.operator === \"OR\";\n  };\n\n  FacetAccessor.prototype.getBoolBuilder = function () {\n    return this.isOrOperator() ? query_1.BoolShould : query_1.BoolMust;\n  };\n\n  FacetAccessor.prototype.getOrder = function () {\n    var _a;\n\n    if (this.options.orderKey) {\n      var orderDirection = this.options.orderDirection || \"asc\";\n      return _a = {}, _a[this.options.orderKey] = orderDirection, _a;\n    }\n  };\n\n  FacetAccessor.prototype.buildSharedQuery = function (query) {\n    var _this = this;\n\n    var filters = this.state.getValue();\n    var filterTerms = map(filters, function (filter) {\n      return _this.fieldContext.wrapFilter(query_1.TermQuery(_this.options.field, filter));\n    });\n    var selectedFilters = map(filters, function (filter) {\n      return {\n        name: _this.options.title || _this.translate(_this.options.field),\n        value: _this.translate(filter),\n        id: _this.options.id,\n        remove: function remove() {\n          return _this.state = _this.state.remove(filter);\n        }\n      };\n    });\n    var boolBuilder = this.getBoolBuilder();\n\n    if (filterTerms.length > 0) {\n      query = query.addFilter(this.uuid, boolBuilder(filterTerms)).addSelectedFilters(selectedFilters);\n    }\n\n    return query;\n  };\n\n  FacetAccessor.prototype.buildOwnQuery = function (query) {\n    if (!this.loadAggregations) {\n      return query;\n    } else {\n      var excludedKey = this.isOrOperator() ? this.uuid : undefined;\n      return query.setAggs(query_1.FilterBucket.apply(void 0, [this.uuid, query.getFiltersWithoutKeys(excludedKey)].concat(this.fieldContext.wrapAggregations(query_1.TermsBucket(this.options.field, this.options.field, omitBy({\n        size: this.size,\n        order: this.getOrder(),\n        include: this.options.include,\n        exclude: this.options.exclude,\n        min_doc_count: this.options.min_doc_count\n      }, isUndefined)), query_1.CardinalityMetric(this.options.field + \"_count\", this.options.field)))));\n    }\n  };\n\n  FacetAccessor.translations = {\n    \"facets.view_more\": \"View more\",\n    \"facets.view_less\": \"View less\",\n    \"facets.view_all\": \"View all\"\n  };\n  return FacetAccessor;\n}(FilterBasedAccessor_1.FilterBasedAccessor);\n\nexports.FacetAccessor = FacetAccessor;","map":null,"metadata":{},"sourceType":"script"}