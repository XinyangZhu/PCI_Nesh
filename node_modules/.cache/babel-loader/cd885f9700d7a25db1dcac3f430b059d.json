{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar update = require(\"immutability-helper\");\n\nvar query_dsl_1 = require(\"./query_dsl\");\n\nvar Utils_1 = require(\"../support/Utils\");\n\nvar omitBy = require(\"lodash/omitBy\");\n\nvar omit = require(\"lodash/omit\");\n\nvar values = require(\"lodash/values\");\n\nvar pick = require(\"lodash/pick\");\n\nvar merge = require(\"lodash/merge\");\n\nvar isUndefined = require(\"lodash/isUndefined\");\n\nvar ImmutableQuery =\n/** @class */\nfunction () {\n  function ImmutableQuery(index) {\n    if (index === void 0) {\n      index = ImmutableQuery.defaultIndex;\n    }\n\n    this.index = index;\n    this.buildQuery();\n  }\n\n  ImmutableQuery.prototype.buildQuery = function () {\n    var query = {};\n\n    if (this.index.queries.length > 0) {\n      query.query = query_dsl_1.BoolMust(this.index.queries);\n    }\n\n    if (this.index.filters.length > 0) {\n      query.post_filter = query_dsl_1.BoolMust(this.index.filters);\n    }\n\n    query.aggs = this.index.aggs;\n    query.size = this.index.size;\n    query.from = this.index.from;\n    query.sort = this.index.sort;\n    query.highlight = this.index.highlight;\n    query.suggest = this.index.suggest;\n\n    if (this.index._source) {\n      query._source = this.index._source;\n    }\n\n    this.query = omitBy(query, isUndefined);\n  };\n\n  ImmutableQuery.prototype.hasFilters = function () {\n    return this.index.filters.length > 0;\n  };\n\n  ImmutableQuery.prototype.hasFiltersOrQuery = function () {\n    return this.index.queries.length + this.index.filters.length > 0 || !!this.index.sort;\n  };\n\n  ImmutableQuery.prototype.addQuery = function (query) {\n    if (!query) {\n      return this;\n    }\n\n    return this.update({\n      queries: {\n        $push: [query]\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.setQueryString = function (queryString) {\n    return this.update({\n      $merge: {\n        queryString: queryString\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.getQueryString = function () {\n    return this.index.queryString;\n  };\n\n  ImmutableQuery.prototype.addSelectedFilter = function (selectedFilter) {\n    return this.addSelectedFilters([selectedFilter]);\n  };\n\n  ImmutableQuery.prototype.addSelectedFilters = function (selectedFilters) {\n    return this.update({\n      selectedFilters: {\n        $push: selectedFilters\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.getSelectedFilters = function () {\n    return this.index.selectedFilters;\n  };\n\n  ImmutableQuery.prototype.addAnonymousFilter = function (bool) {\n    return this.addFilter(Utils_1.Utils.guid(), bool);\n  };\n\n  ImmutableQuery.prototype.addFilter = function (key, filter) {\n    var _a;\n\n    return this.update({\n      filters: {\n        $push: [filter]\n      },\n      filtersMap: {\n        $merge: (_a = {}, _a[key] = filter, _a)\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.setAggs = function (aggs) {\n    return this.deepUpdate(\"aggs\", aggs);\n  };\n\n  ImmutableQuery.prototype.getFilters = function (keys) {\n    if (keys === void 0) {\n      keys = [];\n    }\n\n    return this.getFiltersWithoutKeys(keys);\n  };\n\n  ImmutableQuery.prototype._getFilters = function (keys, method) {\n    keys = [].concat(keys);\n    var filters = values(method(this.index.filtersMap || {}, keys));\n    return query_dsl_1.BoolMust(filters);\n  };\n\n  ImmutableQuery.prototype.getFiltersWithKeys = function (keys) {\n    return this._getFilters(keys, pick);\n  };\n\n  ImmutableQuery.prototype.getFiltersWithoutKeys = function (keys) {\n    return this._getFilters(keys, omit);\n  };\n\n  ImmutableQuery.prototype.setSize = function (size) {\n    return this.update({\n      $merge: {\n        size: size\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.setSort = function (sort) {\n    return this.update({\n      $merge: {\n        sort: sort\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.setSource = function (_source) {\n    return this.update({\n      $merge: {\n        _source: _source\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.setHighlight = function (highlight) {\n    return this.deepUpdate(\"highlight\", highlight);\n  };\n\n  ImmutableQuery.prototype.getSize = function () {\n    return this.query.size;\n  };\n\n  ImmutableQuery.prototype.setFrom = function (from) {\n    return this.update({\n      $merge: {\n        from: from\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.getFrom = function () {\n    return this.query.from;\n  };\n\n  ImmutableQuery.prototype.getPage = function () {\n    return 1 + Math.floor((this.getFrom() || 0) / (this.getSize() || 10));\n  };\n\n  ImmutableQuery.prototype.deepUpdate = function (key, ob) {\n    var _a;\n\n    return this.update({\n      $merge: (_a = {}, _a[key] = merge({}, this.index[key] || {}, ob), _a)\n    });\n  };\n\n  ImmutableQuery.prototype.setSuggestions = function (suggestions) {\n    return this.update({\n      $merge: {\n        suggest: suggestions\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.update = function (updateDef) {\n    return new ImmutableQuery(update(this.index, updateDef));\n  };\n\n  ImmutableQuery.prototype.getJSON = function () {\n    return this.query;\n  };\n\n  ImmutableQuery.prototype.printJSON = function () {\n    console.log(JSON.stringify(this.getJSON(), null, 2));\n  };\n\n  ImmutableQuery.defaultIndex = {\n    queryString: \"\",\n    filtersMap: {},\n    selectedFilters: [],\n    queries: [],\n    filters: [],\n    _source: null,\n    size: 0\n  };\n  return ImmutableQuery;\n}();\n\nexports.ImmutableQuery = ImmutableQuery;","map":null,"metadata":{},"sourceType":"script"}