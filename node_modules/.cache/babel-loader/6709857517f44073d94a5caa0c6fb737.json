{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar defaults = require(\"lodash/defaults\");\n\nvar PaginationHelper =\n/** @class */\nfunction () {\n  function PaginationHelper(_a) {\n    var currentPage = _a.currentPage,\n        totalPages = _a.totalPages,\n        translate = _a.translate;\n    this.currentPage = currentPage;\n    this.totalPages = totalPages;\n    this.translate = translate;\n    this.pages = [];\n    this.lastPage = 0; // Last added page number\n  }\n\n  PaginationHelper.prototype.push = function (item) {\n    this.pages.push(item);\n  };\n\n  PaginationHelper.prototype.previous = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.push(defaults({\n      key: \"previous\",\n      label: this.translate('pagination.previous'),\n      page: this.currentPage > 1 ? this.currentPage - 1 : undefined,\n      disabled: this.currentPage === 1\n    }, options));\n  };\n\n  PaginationHelper.prototype.next = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.push(defaults({\n      key: \"next\",\n      label: this.translate('pagination.next'),\n      page: this.currentPage < this.totalPages - 1 ? this.currentPage + 1 : undefined,\n      disabled: this.currentPage === this.totalPages\n    }, options));\n  };\n\n  PaginationHelper.prototype.page = function (pageNumber, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (pageNumber > 0 && pageNumber <= this.totalPages) {\n      this.push(defaults({\n        key: pageNumber,\n        label: '' + pageNumber,\n        page: pageNumber,\n        active: pageNumber == this.currentPage\n      }, options));\n    }\n  };\n\n  PaginationHelper.prototype.range = function (minPage, maxPage, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var min = Math.max(1, minPage);\n    var max = Math.min(maxPage, this.totalPages);\n\n    for (var i = min; i <= max; i++) {\n      this.page(i, options);\n    }\n  };\n\n  PaginationHelper.prototype.ellipsis = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.push(defaults({\n      key: \"ellipsis-\" + this.pages.length,\n      label: '...',\n      disabled: true\n    }, options));\n  };\n\n  return PaginationHelper;\n}();\n\nexports.PaginationHelper = PaginationHelper;\nexports.Paginator = {\n  build: function build(_a) {\n    var _b = _a.showNumbers,\n        showNumbers = _b === void 0 ? true : _b,\n        _c = _a.showPrevious,\n        showPrevious = _c === void 0 ? true : _c,\n        _d = _a.showNext,\n        showNext = _d === void 0 ? true : _d,\n        _e = _a.showEllipsis,\n        showEllipsis = _e === void 0 ? true : _e,\n        _f = _a.showFirst,\n        showFirst = _f === void 0 ? true : _f,\n        _g = _a.showLast,\n        showLast = _g === void 0 ? false : _g;\n    return function (currentPage, totalPages, translate, pageScope) {\n      if (pageScope === void 0) {\n        pageScope = 3;\n      }\n\n      var builder = new PaginationHelper({\n        currentPage: currentPage,\n        totalPages: totalPages,\n        translate: translate\n      });\n      if (showPrevious) builder.previous();\n\n      if (showNumbers) {\n        if (showFirst && currentPage > pageScope + 1) builder.page(1);\n        if (showEllipsis && currentPage > pageScope + 2) builder.ellipsis();\n        builder.range(currentPage - pageScope, currentPage - 1);\n        builder.page(currentPage, {\n          active: true\n        });\n        builder.range(currentPage + 1, currentPage + pageScope);\n        var lastEllipsisLimit = showLast ? totalPages - pageScope - 1 : totalPages - pageScope;\n        if (showEllipsis && currentPage < lastEllipsisLimit) builder.ellipsis();\n        if (showLast && currentPage < totalPages - pageScope) builder.page(totalPages);\n      }\n\n      if (showNext) builder.next();\n      return builder.pages;\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"script"}